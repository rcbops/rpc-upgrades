#!/bin/bash

## Shell Opts ----------------------------------------------------------------

set -e -u -x
set -o pipefail

## Display environment
echo "+-------------------- ENV VARS --------------------+"
env
echo "+-------------------- ENV VARS --------------------+"

## Vars ----------------------------------------------------------------------
export FUNCTIONAL_TEST=${FUNCTIONAL_TEST:-true}
export RUN_UPGRADE=${RUN_UPGRADE:-true}

# These vars are set by the CI environment, but are given defaults
# here to cater for situations where someone is executing the test
# outside of the CI environment.
export RE_JOB_NAME="${RE_JOB_NAME:-}"
export RE_JOB_IMAGE="${RE_JOB_IMAGE:-trusty_aio}"
export RE_JOB_SCENARIO="${RE_JOB_SCENARIO:-swift}"
export RE_JOB_ACTION="${RE_JOB_ACTION:-undefined}"
export RE_JOB_FLAVOR="${RE_JOB_FLAVOR:-}"
export RE_JOB_TRIGGER="${RE_JOB_TRIGGER:-PR}"
export RE_HOOK_ARTIFACT_DIR="${RE_HOOK_ARTIFACT_DIR:-/tmp/artifacts}"
export RE_HOOK_RESULT_DIR="${RE_HOOK_RESULT_DIR:-/tmp/results}"

# translates RE_JOB_ACTION to RE_JOB_UPGRADE vars
export RE_JOB_CONTEXT=`echo ${RE_JOB_ACTION} | awk -F'_' {'print $1'}`
export RE_JOB_UPGRADE_TO=`echo ${RE_JOB_ACTION} | awk -F'_' {'print $3'}`
export RE_JOB_UPGRADE_ACTION=`echo ${RE_JOB_ACTION} | awk -F'_' {'print $4'}`

# translates RE_JOB_IMAGE
export RE_JOB_IMAGE_OS=`echo ${RE_JOB_IMAGE} | awk -F'_' {'print $1'}`
export RE_JOB_IMAGE_TYPE=`echo ${RE_JOB_IMAGE} | awk -F'_' {'print $2'}`

export TESTING_HOME="${TESTING_HOME:-$HOME}"
export ANSIBLE_LOG_DIR="${TESTING_HOME}/.ansible/logs"
export ANSIBLE_LOG_PATH="${ANSIBLE_LOG_DIR}/ansible-aio.log"
export OSA_PATH="/opt/rpc-openstack/openstack-ansible"
export WORKSPACE_PATH=`pwd`

## Main ----------------------------------------------------------------------

### Determine series from RE_JOB_CONTEXT

if [[ "${RE_JOB_CONTEXT}" == "r11."* ]]; then
  export RE_JOB_SERIES="kilo"
elif [[ "${RE_JOB_CONTEXT}" == "r12."* ]]; then
  export RE_JOB_SERIES="liberty"
elif [[ "${RE_JOB_CONTEXT}" == "r13."* ]]; then
  export RE_JOB_SERIES="mitaka"
elif [[ "${RE_JOB_CONTEXT}" == "r14."* ]]; then
  export RE_JOB_SERIES="newton"
else
  export RE_JOB_SERIES=${RE_JOB_CONTEXT}
fi

# dump all RE_ vars to file so it can be sourced for MNAIO
env | grep RE_ | sed 's/^/export /' > /opt/rpc-upgrades/RE_ENV

if [ "${FUNCTIONAL_TEST}" = true ]; then
  sudo -H --preserve-env ./run-bindep.sh
  sudo -H --preserve-env pip install -r test-requirements.txt
  sudo -H --preserve-env ./tests/prepare-rpco.sh
  if [ "${RE_JOB_IMAGE_TYPE}" = "mnaio" ]; then
    sudo -H --preserve-env ./tests/create-mnaio.sh
    if [ "${RUN_UPGRADE}" = true ]; then
      sudo -H --preserve-env ./tests/upgrade-mnaio.sh
    fi
  else
    sudo -H --preserve-env ./tests/create-aio.sh
    sudo -H --preserve-env ./tests/maas-install.sh
    if [ "${RUN_UPGRADE}" = true ]; then
      sudo -H --preserve-env ./tests/test-upgrade.sh
      sudo -H --preserve-env ./tests/maas-install.sh
      sudo -H --preserve-env ./tests/qc-test.sh
      # RLM-292 secondary test-upgrade run to validate idempotency
      export RUN_PREFLIGHT=no
      sudo -H --preserve-env ./tests/test-upgrade.sh
      # RLM-293 secondary qc run after test-upgrade attempt
      sudo -H --preserve-env ./tests/qc-test.sh
      #sudo -H --preserve-env ./tests/run-tempest.sh
    fi
  fi
else
  sudo -H --preserve-env tox
fi
