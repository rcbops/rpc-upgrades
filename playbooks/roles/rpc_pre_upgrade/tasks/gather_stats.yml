---
# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Install OpenStack python clients if not already installed
  pip:
    name: "{{ item }}"
    state: latest
  with_items:
    - python-novaclient
    - python-openstackclient
    - python-neutronclient
    - python-heatclient
    - python-cinderclient

- name: Gather openstack CLI version
  shell: |
    . {{ ansible_env.HOME }}/openrc
    openstack --version 2>&1
  args:
    executable: /bin/bash
  register: openstack_cli_version

- name: Gather neutron CLI version
  shell: |
    . {{ ansible_env.HOME }}/openrc
    neutron --version 2>&1
  args:
    executable: /bin/bash
  register: neutron_cli_version

- name: Check rabbit cluster status
  shell: "rabbitmqctl cluster_status"
  register: rabbitmqctl_result
  delegate_to: "{{ groups['rabbitmq_all'][0] }}"

- name: Check mysql cluster status
  shell: "mysql -e \"show status like 'wsrep_clu%'\""
  register: mysqlstatus_result
  delegate_to: "{{ groups['galera_all'][0] }}"

- name: Gather nova service-list
  shell: |
    . {{ ansible_env.HOME }}/openrc
    nova {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} service-list
  args:
    executable: /bin/bash
  register: nova_servicelist_result
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Gather cinder service-list
  shell: |
    . {{ ansible_env.HOME }}/openrc
    cinder {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} service-list
  register: cinder_servicelist_result
  args:
    executable: /bin/bash
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Gather neutron agent-list
  shell: |
    . {{ ansible_env.HOME }}/openrc
    neutron {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} agent-list
  args:
    executable: /bin/bash
  register: neutron_agentlist_result
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Gather orchestration service list
  shell: |
    . {{ ansible_env.HOME }}/openrc
    openstack {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} orchestration service list
  args:
    executable: /bin/bash
  register: orchestration_servicelist_result
  when: openstack_cli_version.stdout.split('openstack')[1] >= "2.3.0"
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Gather heat service list
  shell: |
    . {{ ansible_env.HOME }}/openrc
    heat {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} service-list
  args:
    executable: /bin/bash
  register: orchestration_servicelist_result
  when: openstack_cli_version.stdout.split('openstack')[1] < "2.3.0"
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Gather openstack endpoint list
  shell: |
    . {{ ansible_env.HOME }}/openrc
    openstack {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} endpoint list
  args:
    executable: /bin/bash
  register: endpointlist_result
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Gather running instances from mysql
  shell: "mysql -BN -e \"select uuid from instances where deleted=0 and vm_state='active' order by uuid\" nova"
  args:
    executable: /bin/bash
  register: running_instances_result
  delegate_to: "{{ groups['galera_all'][0] }}"

- name: Gather instance-volume mappings from mysql
  shell: "mysql -e \"select v.id,v.provider_location,va.attached_host,va.instance_uuid,va.mountpoint from volumes v join volume_attachment va on v.id = va.volume_id where v.deleted = 0 and v.attach_status='attached'\" cinder"
  args:
    executable: /bin/bash
  register: instance_volume_mappings_result
  delegate_to: "{{ groups['galera_all'][0] }}"

- name: Output into text file
  template:
    src: "{{ item }}.txt.j2"
    dest: "{{ backup_dir }}/{{ item }}-{{ datetime_stamp }}.txt"
  with_items:
    - status
    - instance-volume-mappings
    - running-instances

- name: Obtain a list of neutron routers
  shell: |
    . {{ ansible_env.HOME }}/openrc
    neutron {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} router-list -f table --column id |awk '/([A-Fa-f0-9]+\-)+[A-Fa-f0-9]+/ {print $2}'
  register: neutron_routers
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Check agent assigned to each neutron router
  shell: |
    . {{ ansible_env.HOME }}/openrc
    neutron {{ openrc_insecure |default(false) |bool |ternary('--insecure','') }} l3-agent-list-hosting-router -f table --column host {{ item }} |awk '/([A-Fa-f0-9]+\-)+[A-Fa-f0-9]+/ {print $2}'
  with_items: "{{ neutron_routers.stdout_lines }}"
  register: neutron_routers_agents
  delegate_to: "{{ groups['utility_all'][0] }}"

- name: Write file containing agent for each router
  copy:
    content: "{{ item.stdout|replace('_','-') }}" # we replace here since containers will get renamed during upgrade
    dest: "{{ backup_dir }}/{{ item.item }}.pre-upgrade"
  with_items: "{{ neutron_routers_agents.results |default([]) }}"
  delegate_to: localhost
